
DROP TABLE IF EXISTS FILM_LIKES CASCADE;
DROP TABLE IF EXISTS USER_FRIEND CASCADE;
DROP TABLE IF EXISTS FILM_GENRES CASCADE;
DROP TABLE IF EXISTS GENRES CASCADE;
DROP TABLE IF EXISTS MPA CASCADE;
DROP TABLE IF EXISTS USERS CASCADE;
DROP TABLE IF EXISTS FILMS CASCADE;
DROP TABLE IF EXISTS DIRECTORS CASCADE;
DROP TABLE IF EXISTS FILM_DIRECTORS CASCADE;
drop table IF EXISTS REVIEWS CASCADE;
drop table IF EXISTS REVIEW_LIKES CASCADE;
DROP TABLE IF EXISTS FEED CASCADE;
DROP TABLE IF EXISTS ENTITY_TYPE CASCADE;
DROP TABLE IF EXISTS EVENT CASCADE;
DROP TABLE IF EXISTS OPERATION CASCADE;

create TABLE GENRES (
	GENRE_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	NAME CHARACTER VARYING(200) NOT NULL
);
create TABLE MPA (
	MPA_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	NAME CHARACTER VARYING(200) NOT NULL,
	DESCRIPTION CHARACTER VARYING(200) NOT NULL
);
create TABLE FILMS (
	FILM_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	NAME CHARACTER VARYING(200) NOT NULL,
	DESCRIPTION CHARACTER VARYING(200) NOT NULL,
	RELEASE_DATE DATE NOT NULL,
	DURATION INTEGER NOT NULL,
	MPA_ID INTEGER NOT NULL REFERENCES MPA(MPA_ID) ON delete CASCADE
);
create TABLE FILM_GENRES (
    PAIR_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	FILM_ID INTEGER NOT NULL REFERENCES FILMS(FILM_ID) ON delete CASCADE,
	GENRE_ID INTEGER NOT NULL REFERENCES GENRES(GENRE_ID) ON delete CASCADE
);
create unique index IF NOT EXISTS FILM_GENRE_UINDEX on FILM_GENRES (FILM_ID, GENRE_ID);

create TABLE USERS (
	USER_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	EMAIL CHARACTER VARYING(200) NOT NULL,
	LOGIN CHARACTER VARYING(200) NOT NULL,
	NAME CHARACTER VARYING(200) NOT NULL,
	BIRTHDAY DATE NOT NULL
);
create unique index IF NOT EXISTS USER_EMAIL_UINDEX on USERS (email);
create unique index IF NOT EXISTS USER_LOGIN_UINDEX on USERS (login);

create TABLE FILM_LIKES (
    PAIR_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	FILM_ID INTEGER NOT NULL REFERENCES FILMS(FILM_ID) ON delete CASCADE,
	USER_ID INTEGER NOT NULL REFERENCES USERS(USER_ID) ON delete CASCADE
);
create unique index IF NOT EXISTS FILM_LIKE_UINDEX on FILM_LIKES (FILM_ID, USER_ID);

create TABLE REVIEWS (
    REVIEW_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FILM_ID INTEGER NOT NULL REFERENCES FILMS(FILM_ID) ON delete CASCADE,
    USER_ID INTEGER NOT NULL REFERENCES USERS(USER_ID) ON delete CASCADE,
    REVIEW_BODY CHARACTER VARYING(1000) NOT NULL,
    IS_POSITIVE BOOLEAN NOT NULL,
    USEFUL INTEGER
);

create TABLE REVIEW_LIKES (
    LIKE_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    REVIEW_ID INTEGER NOT NULL REFERENCES REVIEWS(REVIEW_ID) ON delete CASCADE,
    USER_ID INTEGER NOT NULL REFERENCES USERS(USER_ID) ON delete CASCADE,
    IS_LIKE BOOLEAN NOT NULL
);

create unique index IF NOT EXISTS REVIEW_LIKE_UINDEX on REVIEW_LIKES (REVIEW_ID, USER_ID);

create TABLE USER_FRIEND (
    PAIR_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	USER_ID INTEGER NOT NULL REFERENCES USERS(USER_ID) ON delete CASCADE,
	FRIEND_ID INTEGER NOT NULL REFERENCES USERS(USER_ID) ON delete CASCADE
);

CREATE UNIQUE index IF NOT EXISTS USER_FRIEND_UINDEX on USER_FRIEND (USER_ID, FRIEND_ID);

CREATE TABLE DIRECTORS (
    DIRECTOR_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME CHARACTER VARYING(200) NOT NULL
);

CREATE TABLE FILM_DIRECTORS (
    PAIR_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FILM_ID INTEGER NOT NULL REFERENCES FILMS(FILM_ID) ON DELETE CASCADE,
    DIRECTOR_ID INTEGER NOT NULL REFERENCES DIRECTORS(DIRECTOR_ID) ON DELETE CASCADE
);
CREATE UNIQUE index IF NOT EXISTS FILM_DIRECTOR_UINDEX on FILM_DIRECTORS (FILM_ID, DIRECTOR_ID);

CREATE TABLE IF NOT EXISTS EVENT(
EVENT_TYPE_ID INTEGER NOT NULL,
EVENT_NAME VARCHAR(20),
CONSTRAINT CONSTRAINT_EVENT_TYPE_ID PRIMARY KEY (EVENT_TYPE_ID)
);
CREATE UNIQUE INDEX IF NOT EXISTS PRIMARY_KEY_EVENT_TYPE_ID ON EVENT (EVENT_TYPE_ID);

CREATE TABLE IF NOT EXISTS OPERATION(
OPERATION_ID INTEGER NOT NULL,
OPERATION_NAME VARCHAR(20),
CONSTRAINT CONSTRAINT_OPERATION PRIMARY KEY (OPERATION_ID)
);
CREATE UNIQUE INDEX IF NOT EXISTS PRIMARY_KEY_OPERATION ON OPERATION (OPERATION_ID);

CREATE TABLE IF NOT EXISTS ENTITY_TYPE (
ENTITY_TYPE_ID INTEGER NOT NULL AUTO_INCREMENT,
ENTITY_NAME VARCHAR(10),
CONSTRAINT CONSTRAINT_ENTITY_TYPE_ID  PRIMARY KEY (ENTITY_TYPE_ID)
);
CREATE UNIQUE INDEX IF NOT EXISTS PRIMARY_KEY_ENTITY_TYPE_ID  ON ENTITY_TYPE (ENTITY_TYPE_ID);

CREATE TABLE IF NOT EXISTS FEED(
EVENT_ID INTEGER NOT NULL AUTO_INCREMENT,
USER_ID INTEGER REFERENCES USERS ON DELETE CASCADE ON UPDATE CASCADE,
ENTITY_ID INTEGER,
ENTITY_TYPE_ID INTEGER REFERENCES ENTITY_TYPE ON DELETE CASCADE ON UPDATE CASCADE,
EVENT_TYPE INTEGER REFERENCES EVENT ON DELETE CASCADE ON UPDATE CASCADE,
OPERATION INTEGER REFERENCES OPERATION ON DELETE CASCADE ON UPDATE CASCADE,
TIME_STAMP TIMESTAMP,
CONSTRAINT CONSTRAINT_EVENT_ID  PRIMARY KEY (EVENT_ID )
);
CREATE UNIQUE INDEX IF NOT EXISTS PRIMARY_KEY_EVENT_ID  ON FEED (EVENT_ID);

